---
title: "Construire son propre DataFrame"
weight: 10
tags:
  - Basics
  - Versions
categories:
  - TP
  - Introduction
type: book
# description: 
image: .img/tpcompile.png
filters:
  - pyodide
---

# Instructions

Votre tâche est de créer une classe `DataFrameSimple` qui simule les fonctionnalités de base d'un dataframe. Suivez ces instructions :

1. Créez un fichier nommé `dataframe_simple.py`.

2. Dans ce fichier, implémentez la classe `DataFrameSimple` avec les méthodes suivantes :

   - `__init__(self, data)` : Le constructeur qui accepte un dictionnaire de données.
   - `afficher(self)` : Retourne une chaîne représentant les premières lignes du dataframe.
   - `moyenne(self, nom_colonne)` : Calcule la moyenne d'une colonne.
   - `somme(self, nom_colonne)` : Calcule la somme d'une colonne.
   - `min(self, nom_colonne)` : Trouve le minimum d'une colonne.
   - `max(self, nom_colonne)` : Trouve le maximum d'une colonne.
   - `select_colonne(self, nom_colonne)` : Retourne les valeurs d'une colonne.

3. Votre classe doit avoir les attributs suivants :
   - `donnees` : Un numpy array contenant les données.
   - `colonnes` : Une liste des noms de colonnes.

4. Utilisez numpy pour les calculs statistiques (np.mean(), np.sum(), etc.).

5. Une fois votre implémentation terminée, exécutez les tests unitaires en lançant `python test_dataframe_simple.py`.

6. Assurez-vous que tous les tests passent. Si ce n'est pas le cas, revoyez votre implémentation.

Conseils :
- Commencez par implémenter le constructeur et la méthode `afficher()`.
- Utilisez les fonctions numpy pour les calculs statistiques.
- N'oubliez pas d'importer numpy dans votre fichier `dataframe_simple.py`.


# Tests Unitaires pour verifier votre implémentation

Voici un ensemble de tests unitaires simplifiés pour votre classe `DataFrameSimple`. Copier votre classe avec ce code pour la tester :

```{pyodide-python}
import unittest
import numpy as np

class DataFrameSimple:
   #TODO
   pass

class TestDataFrameSimple(unittest.TestCase):

    def setUp(self):
        self.data_dict = {
            'A': [1, 2, 3, 4, 5],
            'B': [10, 20, 30, 40, 50],
            'C': [100, 200, 300, 400, 500]
        }
        self.df = DataFrameSimple(self.data_dict)

    def test_creation(self):
        self.assertIsInstance(self.df, DataFrameSimple)
        self.assertEqual(list(self.df.colonnes), ['A', 'B', 'C'])

    def test_afficher(self):
        result = self.df.afficher()
        self.assertIsInstance(result, str)
        self.assertIn('A', result)
        self.assertIn('B', result)
        self.assertIn('C', result)

    def test_moyenne(self):
        self.assertEqual(self.df.moyenne('A'), 3)
        self.assertEqual(self.df.moyenne('B'), 30)

    def test_somme(self):
        self.assertEqual(self.df.somme('A'), 15)
        self.assertEqual(self.df.somme('B'), 150)

    def test_min(self):
        self.assertEqual(self.df.min('A'), 1)
        self.assertEqual(self.df.min('B'), 10)

    def test_max(self):
        self.assertEqual(self.df.max('A'), 5)
        self.assertEqual(self.df.max('B'), 50)

    def test_select_colonne(self):
        np.testing.assert_array_equal(self.df.select_colonne('A'), np.array([1, 2, 3, 4, 5]))

def run_tests():
    unittest.main(argv=[''], verbosity=2, exit=False)

if __name__ == '__main__':
    run_tests()
```
