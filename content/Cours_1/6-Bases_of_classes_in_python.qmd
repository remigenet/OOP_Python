---
title: "Classes en Python : Concepts fondamentaux"
weight: 10
tags:
  - Basics
  - Compilation
  - Cpython
  - Versions
  - Introduction
  - IDE
categories:
  - Cours
  - Introduction
type: book
description: Découvrez les concepts fondamentaux des classes en Python, y compris les attributs de classe vs d'instance, le rôle de 'self', et les conventions de codage.
image: .img/IDEs.png
filters:
  - pyodide
---

# Classes en Python : Concepts fondamentaux

---

## 1. Qu'est-ce qu'une classe ?

Une classe en Python est un plan ou un modèle pour créer des objets. Elle définit les caractéristiques (attributs) et les comportements (méthodes) que les objets de cette classe auront.

```{pyodide-python}
class Voiture:
    pass  # 'pass' indique que la classe est vide pour l'instant
```

## 2. Création d'une instance

Une instance est un objet spécifique créé à partir d'une classe.

```{pyodide-python}
ma_voiture = Voiture()  # Création d'une instance de la classe Voiture
```

## 3. Comprendre la différence entre classe et instance

- La classe est le modèle général (comme un plan d'architecte).
- L'instance est un objet spécifique créé à partir de ce modèle (comme une maison construite selon le plan).

Exemple :
```{pyodide-python}
class Voiture:
    def __init__(self, marque, modele):
        self.marque = marque
        self.modele = modele

# Création de deux instances différentes
voiture1 = Voiture("Toyota", "Corolla")
voiture2 = Voiture("Honda", "Civic")

print(voiture1.marque)  # Affiche : Toyota
print(voiture2.marque)  # Affiche : Honda
```

Dans cet exemple, `Voiture` est la classe, tandis que `voiture1` et `voiture2` sont des instances de cette classe.

## 4. Comprendre 'self'

`self` est une convention en Python pour référencer l'instance actuelle de la classe. C'est le premier paramètre de toutes les méthodes d'instance.

### 4.1 Rôle de 'self'

- `self` permet à la méthode de savoir sur quelle instance spécifique elle travaille.
- Il est automatiquement passé par Python lors de l'appel d'une méthode sur une instance.

```{pyodide-python}
class Voiture:
    def __init__(self, marque, modele):
        self.marque = marque
        self.modele = modele
    
    def description(self):
        return f"Cette voiture est une {self.marque} {self.modele}"

ma_voiture = Voiture("Peugeot", "308")
print(ma_voiture.description())  # Affiche : Cette voiture est une Peugeot 308
```

Dans cet exemple :
- `self.marque = marque` stocke la marque pour cette instance spécifique.
- Dans `description()`, `self.marque` fait référence à la marque de l'instance sur laquelle la méthode est appelée.

## 5. Méthode __init__

`__init__` est une méthode spéciale en Python, appelée constructeur. Elle est automatiquement appelée lors de la création d'une nouvelle instance.

```{pyodide-python}
class Voiture:
    def __init__(self, marque, modele):
        print("Une nouvelle voiture est créée!")
        self.marque = marque
        self.modele = modele

ma_voiture = Voiture("Renault", "Clio")
# Affiche : Une nouvelle voiture est créée!
```

## 6. Attributs de classe vs attributs d'instance (version étendue)

### 6.1 Attributs de classe
Ils sont partagés par toutes les instances de la classe, mais peuvent être modifiés au niveau de l'instance.

```{pyodide-python}
class Voiture:
    nombre_de_roues = 4  # Attribut de classe

    def __init__(self, marque, modele):
        self.marque = marque
        self.modele = modele

    def accident(self):
        self.nombre_de_roues = 3  # Modifie l'attribut pour cette instance seulement

print(Voiture.nombre_de_roues)  # Affiche : 4

ma_voiture = Voiture("Fiat", "500")
print(ma_voiture.nombre_de_roues)  # Affiche : 4

ma_voiture.accident()
print(ma_voiture.nombre_de_roues)  # Affiche : 3
print(Voiture.nombre_de_roues)  # Affiche toujours : 4
```

Dans cet exemple, `ma_voiture.accident()` modifie l'attribut `nombre_de_roues` pour cette instance spécifique, sans affecter la classe ou les autres instances.

### 6.2 Attributs d'instance

Les attributs d'instance sont spécifiques à chaque objet créé à partir de la classe. 

```{pyodide-python}
class Voiture:
    def __init__(self, marque, modele):
        self.marque = marque  # Attribut d'instance
        self.modele = modele  # Attribut d'instance
        self.kilometrage = 0  # Attribut d'instance avec une valeur par défaut

    def rouler(self, distance):
        self.kilometrage += distance

ma_voiture = Voiture("Renault", "Clio")
voiture_de_mon_ami = Voiture("Peugeot", "208")

print(ma_voiture.marque)  # Affiche : Renault
print(voiture_de_mon_ami.marque)  # Affiche : Peugeot

ma_voiture.rouler(100)
print(ma_voiture.kilometrage)  # Affiche : 100
print(voiture_de_mon_ami.kilometrage)  # Affiche : 0
```

Dans cet exemple, `marque`, `modele`, et `kilometrage` sont des attributs d'instance. Chaque instance de `Voiture` a ses propres valeurs pour ces attributs. Modifier un attribut d'instance pour un objet n'affecte pas les autres objets de la même classe.

## 7. Comprendre 'self' en profondeur

`self` est une référence à l'instance courante de la classe. C'est le premier paramètre de toute méthode d'instance en Python.

### 7.1 'self' comme référence à l'instance

Lorsqu'une méthode est appelée sur une instance, Python passe automatiquement cette instance comme premier argument à la méthode.

```{pyodide-python}
class Exemple:
    def methode(self, arg):
        print(f"self est: {self}")
        print(f"arg est: {arg}")

ex = Exemple()
ex.methode("test")
# Équivalent à:
# Exemple.methode(ex, "test")
```

### 7.2 'self' est une convention

Bien que 'self' soit une convention, on peut techniquement utiliser n'importe quel nom :

```{pyodide-python}
class Exemple:
    def methode(ceci, arg):
        print(f"ceci est: {ceci}")
        print(f"arg est: {arg}")

ex = Exemple()
ex.methode("test")
```

Cependant, utiliser 'self' est fortement recommandé pour la lisibilité et le respect des conventions.

## 8. Introduction aux conventions de codage (PEP 8)

PEP 8 est le guide de style pour le code Python. Il fournit des conventions pour écrire du code Python lisible et cohérent.

### 8.1 Quelques règles importantes de PEP 8 pour les classes :

1. Noms de classe : Utilisez la convention CapWords (aussi appelée PascalCase).
   ```{pyodide-python}
   class MaClasse:
       pass
   ```

2. Noms de méthodes et d'attributs : Utilisez des minuscules avec des underscores pour séparer les mots.
   ```{pyodide-python}
   class MaClasse:
       def ma_methode(self):
           self.mon_attribut = 42
   ```

3. Constantes : Utilisez des majuscules avec des underscores.
   ```{pyodide-python}
   class MaClasse:
       MA_CONSTANTE = 100
   ```

4. Espaces : Pas d'espaces autour des parenthèses ou des crochets, mais un espace après les virgules.
   ```{pyodide-python}
   def methode(self, arg1, arg2):
       return [arg1, arg2]
   ```

5. Indentation : Utilisez 4 espaces par niveau d'indentation.

### 8.2 Importance de PEP 8

Suivre PEP 8 rend votre code :
- Plus lisible pour les autres développeurs
- Plus cohérent avec la majorité du code Python
- Plus facile à maintenir sur le long terme
