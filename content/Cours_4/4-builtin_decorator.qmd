---
title: "Built-in Decorators and Standard Library Decorators in Python"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Learn about built-in decorators and standard library decorators in Python, including @property, @classmethod, @staticmethod, @dataclass, and decorators from the functools module."
image: .img/reqandgraph.webp
filters:
  - pyodide
---

# Built-in Decorators and Standard Library Decorators in Python

---

Python provides several built-in decorators and others in its standard library, particularly in the `functools` module. These decorators offer powerful functionality for common programming patterns.

## Built-in Decorators

### @property

The `@property` decorator is used to define methods in a class that act like attributes:

```{pyodide-python}
class Circle:
    def __init__(self, radius):
        self._radius = radius

    @property
    def diameter(self):
        return self._radius * 2

circle = Circle(5)
print(circle.diameter)  # Output: 10
```

### @classmethod

`@classmethod` is used to define methods that operate on the class rather than instances:

```{pyodide-python}
class Date:
    def __init__(self, year, month, day):
        self.year = year
        self.month = month
        self.day = day

    @classmethod
    def from_string(cls, date_string):
        year, month, day = map(int, date_string.split('-'))
        return cls(year, month, day)

date = Date.from_string("2024-07-29")
print(date.year)  # Output: 2024
```

### @staticmethod

`@staticmethod` is used for methods that don't need access to the class or instance:

```{pyodide-python}
class MathOperations:
    @staticmethod
    def add(x, y):
        return x + y

print(MathOperations.add(5, 3))  # Output: 8
```

### @dataclass

The @dataclass decorator, introduced in Python 3.7, automatically generates special methods like __init__(), __repr__(), and __eq__() for a class:
```{pyodide-python}
from dataclasses import dataclass

@dataclass
class Point:
    x: float
    y: float

p = Point(1.0, 2.0)
print(p)  # Output: Point(x=1.0, y=2.0)
```
This decorator simplifies the creation of classes that are primarily used to store data, reducing boilerplate code significantly.

## Decorators from functools

The `functools` module in Python's standard library provides several useful decorators:

### @functools.lru_cache

This decorator implements memoization, caching the results of a function:

```{pyodide-python}
from functools import lru_cache

@lru_cache(maxsize=None)
def fibonacci(n):
    if n < 2:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(100))  # Computes quickly due to caching
```

### @functools.cache

Introduced in Python 3.9, `@cache` is a simpler unbounded cache:

```{pyodide-python}
from functools import cache

@cache
def factorial(n):
    return n * factorial(n-1) if n else 1

print(factorial(10))  # Subsequent calls are faster due to caching
```

### @functools.wraps

This decorator is used when writing custom decorators to preserve the metadata of the original function:

```{pyodide-python}
from functools import wraps

def my_decorator(func):
    @wraps(func)
    def wrapper(*args, **kwargs):
        """This is the wrapper function"""
        print('Before the function is called.')
        result = func(*args, **kwargs)
        print('After the function is called.')
        return result
    return wrapper

@my_decorator
def say_hello(name):
    """This function says hello"""
    print(f'Hello, {name}!')

say_hello('Alice')
print(say_hello.__doc__)  # Output: This function says hello
```

### @functools.total_ordering

This decorator generates missing comparison methods for a class:

```{pyodide-python}
from functools import total_ordering

@total_ordering
class Person:
    def __init__(self, name, age):
        self.name = name
        self.age = age

    def __eq__(self, other):
        return self.age == other.age

    def __lt__(self, other):
        return self.age < other.age

p1 = Person("Alice", 30)
p2 = Person("Bob", 25)
print(p1 > p2)  # Output: True
```

## Conclusion

These built-in and standard library decorators provide powerful tools for Python developers. They offer efficient solutions for common programming patterns, from property management and method types to caching and comparison operations. Understanding and using these decorators can significantly enhance code readability and performance.