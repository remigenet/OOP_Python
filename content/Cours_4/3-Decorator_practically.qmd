---
title: "Decorator Practically"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Learn about decorators in Python with concrete examples, including basic function decorators, decorators with arguments, class decorators, decorators with parameters, and their practical applications."
image: .img/reqandgraph.webp
filters:
  - pyodide
---

# Decorators in Python: Concrete Examples

---

## Basic Function Decorators

In Python, decorators are implemented using the `@` symbol, followed by the decorator function name, placed above the function definition they're decorating.

Let's start with a simple example:

```{pyodide-python}
def uppercase_decorator(func):
    def wrapper():
        result = func()
        return result.upper()
    return wrapper

@uppercase_decorator
def greet():
    return "hello, world!"

print(greet())  # Output: HELLO, WORLD!
```

In this example, `uppercase_decorator` is a function that takes another function as an argument, modifies its behavior (by converting the result to uppercase), and returns the modified function.

## Function Decorators with Arguments

Decorators can also work with functions that accept arguments:

```{pyodide-python}
def log_function_call(func):
    def wrapper(*args, **kwargs):
        print(f"Calling function: {func.__name__}")
        return func(*args, **kwargs)
    return wrapper

@log_function_call
def add(a, b):
    return a + b

result = add(3, 5)
print(result)
# Output:
# Calling function: add
# 8
```

This decorator logs the name of the function being called before executing it.

## Simple Class Decorator

Decorators can also be applied to classes. Here's a simple example:

```{pyodide-python}
def add_greeting(cls):
    def greet(self):
        return f"Hello! I'm {self.name}"
    
    cls.greet = greet
    return cls

@add_greeting
class Person:
    def __init__(self, name):
        self.name = name

person = Person("Alice")
print(person.greet())  # Output: Hello! I'm Alice
```

This decorator adds a `greet` method to the `Person` class.

## Decorators with Parameters

We can create decorators that accept parameters:

```{pyodide-python}
def repeat(times):
    def decorator(func):
        def wrapper(*args, **kwargs):
            for _ in range(times):
                result = func(*args, **kwargs)
            return result
        return wrapper
    return decorator

@repeat(3)
def say_hello(name):
    print(f"Hello, {name}!")

say_hello("Bob")
# Output:
# Hello, Bob!
# Hello, Bob!
# Hello, Bob!
```

This `repeat` decorator takes an argument specifying how many times the decorated function should be called.

## Conclusion

These examples demonstrate the basic usage of decorators in Python. They allow for modifying or enhancing the behavior of functions and classes without changing their source code. Decorators provide a clean and reusable way to extend functionality, making code more modular and easier to maintain.
