---
title: "Encapsulation en Python"
weight: 10
tags:
  - Syntaxe
  - Bases
  - heritage
  - mro
categories:
  - Cours
  - Fondamentaux
type: book
description: "Comprendre l'encapsulation en Python et les conventions pour définir des attributs et méthodes publics et privés."
image: .img/basesyntax.png
filters:
  - pyodide
---

# Encapsulation en Python

---

L'encapsulation est l'un des principes fondamentaux de la programmation orientée objet. Elle consiste à regrouper les données et les méthodes qui les manipulent au sein d'une même unité (la classe) et à contrôler l'accès à ces données depuis l'extérieur de la classe.

### Notion de public et privé en Python

Contrairement à certains langages comme Java ou C++, Python n'a pas de mécanisme strict pour définir des attributs ou des méthodes comme "privés" ou "publics". Cependant, Python suit une convention basée sur le nommage pour indiquer l'intention du développeur quant à l'utilisation des attributs et méthodes.

1. **Attributs et méthodes publics** :
   - Nommés normalement, sans underscore.
   - Exemple : `self.attribut`, `def methode(self):`
   - Considérés comme faisant partie de l'interface publique de la classe.

2. **Attributs et méthodes "privés" (convention)** :
   - Préfixés par un simple underscore `_`.
   - Exemple : `self._attribut`, `def _methode(self):`
   - Indique que ces éléments sont destinés à un usage interne et ne devraient pas être accédés directement depuis l'extérieur de la classe.
   - Cette convention est basée sur la confiance : techniquement, ces éléments restent accessibles.

3. **Attributs et méthodes "name mangling"** :
   - Préfixés par un double underscore `__` (sans underscore à la fin).
   - Exemple : `self.__attribut`, `def __methode(self):`
   - Python applique le "name mangling" : le nom est modifié en interne pour inclure le nom de la classe.
   - Rend l'accès depuis l'extérieur plus difficile, mais pas impossible.

### Exemple d'encapsulation en Python

```{pyodide-python}
class CompteBancaire:
    def __init__(self, proprietaire, solde_initial):
        self.proprietaire = proprietaire  # Public
        self._solde = solde_initial       # "Privé" par convention
        self.__historique = []            # "Private" avec name mangling

    def deposer(self, montant):
        if montant > 0:
            self._solde += montant
            self.__ajouter_transaction(f"Dépôt de {montant}")
            return True
        return False

    def retirer(self, montant):
        if 0 < montant <= self._solde:
            self._solde -= montant
            self.__ajouter_transaction(f"Retrait de {montant}")
            return True
        return False

    def obtenir_solde(self):
        return self._solde

    def __ajouter_transaction(self, transaction):
        self.__historique.append(transaction)

# Utilisation
compte = CompteBancaire("Alice", 1000)
print(compte.proprietaire)  # Accès à un attribut public
compte.deposer(500)
print(compte.obtenir_solde())  # Utilisation d'une méthode publique pour accéder au solde

# Les lignes suivantes sont possibles mais déconseillées :
print(compte._solde)  # Accès à un attribut "privé" par convention
# print(compte.__historique)  # Ceci lèvera une AttributeError
print(compte._CompteBancaire__historique)  # Accès à l'attribut avec name mangling
```

### Points importants à retenir :

1. L'encapsulation en Python est basée sur des conventions plutôt que sur des restrictions strictes.
2. Les attributs et méthodes préfixés par un underscore `_` sont considérés comme internes à la classe.
3. Le double underscore `__` déclenche le name mangling, rendant l'accès externe plus difficile mais pas impossible.
4. L'encapsulation est une question de conception et de discipline de programmation en Python.
5. Utilisez des méthodes publiques (getters/setters) pour contrôler l'accès aux données internes si nécessaire.

### Avantages de l'encapsulation :

- Contrôle de l'accès aux données
- Flexibilité pour modifier l'implémentation interne sans affecter le code qui utilise la classe
- Prévention des modifications accidentelles des données internes
- Clarté du code en distinguant l'interface publique des détails d'implémentation
