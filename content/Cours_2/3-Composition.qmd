---
title: "Héritage vs Composition"
weight: 10
tags:
  - Syntaxe
  - Bases
  - heritage
  - composition
categories:
  - Cours
  - Fondamentaux
type: book
description: "Découvrez les différences entre l'héritage et la composition en programmation orientée objet, leurs avantages et inconvénients, et comment choisir la meilleure approche pour concevoir des classes flexibles et extensibles."
image: .img/poo.png
filters:
  - pyodide
---

# Héritage vs Composition

---

### Définitions

1. **Héritage** : Une relation "est-un" où une classe dérive d'une autre, héritant de ses attributs et méthodes.

2. **Composition** : Une relation "a-un" où une classe contient une instance d'une autre classe comme attribut.

### Comparaison

#### Héritage

```{pyodide-python}
class Animal:
    def __init__(self, nom):
        self.nom = nom

    def faire_du_bruit(self):
        pass

class Chien(Animal):
    def faire_du_bruit(self):
        return "Woof!"
```

#### Composition

```{pyodide-python}
class Moteur:
    def demarrer(self):
        return "Moteur démarré"

class Voiture:
    def __init__(self):
        self.moteur = Moteur()

    def demarrer_voiture(self):
        return self.moteur.demarrer()
```

### Avantages et inconvénients

#### Héritage

Avantages :
- Permet une réutilisation directe du code
- Représente bien les relations hiérarchiques naturelles
- Facilite le polymorphisme

Inconvénients :
- Peut créer un couplage fort entre les classes
- Peut devenir complexe avec l'héritage multiple
- Peut violer le principe de substitution de Liskov si mal utilisé

#### Composition

Avantages :
- Offre une plus grande flexibilité
- Permet une meilleure encapsulation
- Facilite les changements de comportement à l'exécution

Inconvénients :
- Peut nécessiter plus de code initial
- Peut être moins intuitif pour représenter certaines relations

### Quand utiliser l'un ou l'autre ?

1. **Utilisez l'héritage quand** :
   - Il existe une relation "est-un" claire et logique
   - Vous voulez réutiliser le code dans plusieurs classes dérivées
   - Le comportement de la classe de base ne change pas souvent

   Exemple : `Chien` est un `Animal`, `Carré` est une `Forme`

2. **Utilisez la composition quand** :
   - Il existe une relation "a-un" ou "utilise-un"
   - Vous voulez une plus grande flexibilité pour changer les comportements
   - Vous voulez éviter les problèmes liés à l'héritage multiple

   Exemple : `Voiture` a un `Moteur`, `Ordinateur` a une `CPU`

### Principe de conception : "Favoriser la composition sur l'héritage"

Ce principe suggère d'utiliser la composition comme première approche, car elle offre généralement plus de flexibilité et un couplage plus faible. L'héritage devrait être utilisé judicieusement, lorsqu'il représente vraiment une relation "est-un".

### Exemple combinant héritage et composition

```{pyodide-python}
class Arme:
    def attaquer(self):
        pass

class Epee(Arme):
    def attaquer(self):
        return "Coup d'épée!"

class Personnage:
    def __init__(self, nom):
        self.nom = nom
        self.arme = None

    def equiper(self, arme):
        self.arme = arme

    def attaquer(self):
        if self.arme:
            return f"{self.nom} attaque : {self.arme.attaquer()}"
        return f"{self.nom} attaque à mains nues!"

class Guerrier(Personnage):
    def cri_de_guerre(self):
        return "Pour l'honneur!"
```

Dans cet exemple :
- `Epee` hérite de `Arme` (relation "est-un")
- `Guerrier` hérite de `Personnage` (relation "est-un")
- `Personnage` utilise la composition avec `Arme` (relation "a-un")

Cette approche combine les avantages de l'héritage et de la composition, permettant une structure flexible et extensible.
