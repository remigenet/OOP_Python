---
title: "Méthodes Dunder en Python"
weight: 10
tags:
  - Syntaxe
  - Bases
categories:
  - Cours
  - Fondamentaux
type: book
description: "Découvrez les méthodes dunder en Python, des méthodes spéciales encadrées par des doubles tirets bas (__), qui permettent de personnaliser le comportement des objets dans différents contextes. Apprenez comment utiliser les méthodes dunder pour l'initialisation, la représentation, les opérations mathématiques, les comparaisons, les conteneurs, la gestion des attributs, l'appel d'objet comme une fonction, la gestion du contexte, et d'autres cas d'utilisation."
image: .img/functionsandmodules.png
filters:
  - pyodide
---

# Les méthodes dunder en Python

---

Les méthodes dunder sont encadrées par des doubles tirets bas (__) et sont appelées automatiquement par Python dans certaines circonstances.

### 1. Initialisation et destruction

#### __init__(self, ...)
- Appelée lors de la création d'une instance.
- Initialise les attributs de l'objet.

```{pyodide-python}
class Personne:
    def __init__(self, nom, age):
        self.nom = nom
        self.age = age
```

#### __del__(self)
- Appelée lorsque l'objet est sur le point d'être détruit.
- Utile pour le nettoyage de ressources.

```{pyodide-python}
class FichierTemporaire:
    def __del__(self):
        print("Nettoyage des fichiers temporaires")
```

### 2. Représentation des objets

#### __str__(self)
- Retourne une représentation lisible de l'objet.
- Utilisée par `str()` et `print()`.

#### __repr__(self)
- Retourne une représentation "officielle" de l'objet.
- Utilisée par `repr()` et dans l'interpréteur interactif.

```{pyodide-python}
class Point:
    def __init__(self, x, y):
        self.x, self.y = x, y
    
    def __str__(self):
        return f"Point({self.x}, {self.y})"
    
    def __repr__(self):
        return f"Point(x={self.x}, y={self.y})"
```

### 3. Opérations mathématiques

#### __add__(self, other), __sub__(self, other), __mul__(self, other), __truediv__(self, other)
- Définissent les opérations +, -, *, / respectivement.

#### __floordiv__(self, other), __mod__(self, other), __pow__(self, other)
- Définissent les opérations //, %, ** respectivement.

```{pyodide-python}
class Vecteur:
    def __init__(self, x, y):
        self.x, self.y = x, y
    
    def __add__(self, other):
        return Vecteur(self.x + other.x, self.y + other.y)
    
    def __mul__(self, scalar):
        return Vecteur(self.x * scalar, self.y * scalar)
```

### 4. Comparaisons

#### __eq__(self, other), __ne__(self, other)
- Définissent == et != respectivement.

#### __lt__(self, other), __le__(self, other), __gt__(self, other), __ge__(self, other)
- Définissent <, <=, >, >= respectivement.

```{pyodide-python}
class Temperature:
    def __init__(self, celsius):
        self.celsius = celsius
    
    def __eq__(self, other):
        return self.celsius == other.celsius
    
    def __lt__(self, other):
        return self.celsius < other.celsius
```

### 5. Conteneurs et séquences

#### __len__(self)
- Retourne la longueur de l'objet.
- Utilisée par la fonction `len()`.

#### __getitem__(self, key)
- Permet l'accès par index ou clé.
- Utilisée pour l'indexation obj[key].

#### __setitem__(self, key, value)
- Permet l'assignation par index ou clé.

#### __iter__(self)
- Retourne un itérateur pour l'objet.

```{pyodide-python}
class MaListe:
    def __init__(self):
        self.data = []
    
    def __len__(self):
        return len(self.data)
    
    def __getitem__(self, index):
        return self.data[index]
    
    def __setitem__(self, index, value):
        self.data[index] = value
    
    def __iter__(self):
        return iter(self.data)
```

### 6. Gestion des attributs

#### __getattr__(self, name)
- Appelée lorsqu'un attribut non trouvé est accédé.

#### __setattr__(self, name, value)
- Appelée lors de l'assignation d'un attribut.

#### __delattr__(self, name)
- Appelée lors de la suppression d'un attribut.

```{pyodide-python}
class Personne:
    def __init__(self, nom):
        self.nom = nom
    
    def __getattr__(self, attr):
        return f"L'attribut {attr} n'existe pas"
    
    def __setattr__(self, name, value):
        print(f"Attribution de {value} à {name}")
        super().__setattr__(name, value)
```

### 7. Appel de l'objet comme une fonction

#### __call__(self, ...)
- Permet d'appeler l'objet comme une fonction.

```{pyodide-python}
class Multiplicateur:
    def __init__(self, facteur):
        self.facteur = facteur
    
    def __call__(self, x):
        return x * self.facteur

doubler = Multiplicateur(2)
print(doubler(5))  # Affiche: 10
```

### 8. Gestion du contexte

#### __enter__(self), __exit__(self, exc_type, exc_value, traceback)
- Utilisées pour le gestionnaire de contexte (with statement).

```{pyodide-python}
class OpenFile:
    def __init__(self, filename, mode):
        self.filename = filename
        self.mode = mode
    
    def __enter__(self):
        self.file = open(self.filename, self.mode)
        return self.file
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        self.file.close()

with OpenFile('fichier.txt', 'w') as f:
    f.write('Hello, world!')
```

### 9. Autres méthodes dunder utiles

- __bool__(self): Définit le comportement pour bool().
- __hash__(self): Permet à l'objet d'être utilisé comme clé de dictionnaire.
- __format__(self, format_spec): Personnalise le formatage de chaînes.

Cette liste, bien que non exhaustive, couvre la plupart des méthodes dunder couramment utilisées en Python. Chacune de ces méthodes permet de personnaliser le comportement des objets dans différents contextes, rendant le langage extrêmement flexible et puissant.
