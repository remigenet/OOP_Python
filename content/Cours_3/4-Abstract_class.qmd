---
title: "Abstract Classes"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Learn about abstract classes in Python, how to define and use them, and the benefits of using abstract classes for creating a common interface and enforcing method implementations in subclasses."
image: .img/sklearn.png
filters:
  - pyodide
---

# Abstract Classes in Python

---

## Concept and Purpose

An abstract class is a class that is designed to be inherited from, but not instantiated directly. It often contains one or more abstract methods - methods that are declared, but don't have an implementation in the abstract class.

### Key characteristics:
1. Cannot be instantiated directly
2. May contain abstract methods (methods without a body)
3. May contain concrete methods (methods with an implementation)
4. Subclasses must implement all abstract methods

### Purpose:
1. To define a common interface for a set of subclasses
2. To enforce certain methods to be implemented by subclasses
3. To share code among several closely related classes

## Abstract Base Classes (ABC) in Python

Python provides the `abc` module to work with abstract base classes.

### Basic Usage:

```{pyodide-python}
from abc import ABC, abstractmethod

class Animal(ABC):
    @abstractmethod
    def make_sound(self):
        pass

    def move(self):
        print("Moving...")
```

In this example:
- `Animal` is an abstract base class
- `make_sound` is an abstract method
- `move` is a concrete method

### Implementing an Abstract Class:

```{pyodide-python}
class Dog(Animal):
    def make_sound(self):
        return "Woof!"

class Cat(Animal):
    def make_sound(self):
        return "Meow!"

# Usage
dog = Dog()
print(dog.make_sound())  # Output: Woof!
dog.move()  # Output: Moving...

cat = Cat()
print(cat.make_sound())  # Output: Meow!

# This would raise an error:
# animal = Animal()  # TypeError: Can't instantiate abstract class Animal
```

### Key Points:
1. The `@abstractmethod` decorator marks a method as abstract
2. Subclasses must implement all abstract methods
3. Abstract classes can have both abstract and concrete methods
4. Trying to instantiate an abstract class directly will raise a `TypeError`

## Why Use Abstract Classes?

1. **Enforcing a common interface**: Abstract classes ensure that all subclasses implement certain methods, guaranteeing a common interface.

2. **Code reuse**: You can implement common functionality in the abstract base class, which all subclasses can use.

3. **Designing frameworks**: Abstract classes are useful when designing large frameworks where you want to provide default behaviors but require specific implementations in subclasses.

## Example: Shape Hierarchy

Here's a more practical example using shapes:

```{pyodide-python}
from abc import ABC, abstractmethod
import math

class Shape(ABC):
    @abstractmethod
    def area(self):
        pass

    @abstractmethod
    def perimeter(self):
        pass

    def describe(self):
        print(f"This shape has an area of {self.area()} and a perimeter of {self.perimeter()}")

class Circle(Shape):
    def __init__(self, radius):
        self.radius = radius

    def area(self):
        return math.pi * self.radius ** 2

    def perimeter(self):
        return 2 * math.pi * self.radius

class Rectangle(Shape):
    def __init__(self, width, height):
        self.width = width
        self.height = height

    def area(self):
        return self.width * self.height

    def perimeter(self):
        return 2 * (self.width + self.height)

# Usage
circle = Circle(5)
rectangle = Rectangle(4, 6)

circle.describe()
rectangle.describe()
```

In this example, `Shape` is an abstract base class that defines the common interface for all shapes. `Circle` and `Rectangle` are concrete implementations of `Shape`.

## Conclusion

Abstract base classes in Python provide a powerful way to define interfaces and ensure that derived classes implement certain methods. They're useful for creating frameworks and libraries, ensuring consistency across related classes, and defining clear contracts for subclasses to follow.

By using abstract classes, you can create more robust and well-structured code, especially when dealing with complex hierarchies of related classes.