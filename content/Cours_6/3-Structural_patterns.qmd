---
title: "Structural Design Patterns"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "DÃ©couvrir les design paterns, et connaitre les plus standards"
image: .img/dunder_poo2.webp
filters:
  - pyodide
---

# Structural Design Patterns in Python

---

Structural patterns explain how to assemble objects and classes into larger structures while keeping these structures flexible and efficient.

## 1. Adapter Pattern

The Adapter pattern allows objects with incompatible interfaces to collaborate.

### 1.1 Example: Legacy Data System Adapter

```{pyodide-python}
from abc import ABC, abstractmethod

# Target Interface
class ModernDataInterface(ABC):
    @abstractmethod
    def get_data(self):
        pass

# Adaptee (Legacy System)
class LegacyDataSystem:
    def fetch_data(self):
        return {"old_key1": "value1", "old_key2": "value2"}

# Adapter
class LegacyDataAdapter(ModernDataInterface):
    def __init__(self, legacy_system):
        self.legacy_system = legacy_system

    def get_data(self):
        old_data = self.legacy_system.fetch_data()
        return {
            "new_key1": old_data["old_key1"],
            "new_key2": old_data["old_key2"]
        }

# Client code
def client_code(data_provider: ModernDataInterface):
    print(data_provider.get_data())

# Usage
legacy_system = LegacyDataSystem()
adapter = LegacyDataAdapter(legacy_system)
client_code(adapter)
```

### 1.2 Benefits of Adapter
- Integrates incompatible interfaces
- Improves reusability of existing code
- Enhances flexibility in system design

## 2. Bridge Pattern

The Bridge pattern separates an object's abstraction from its implementation, allowing them to vary independently.

### 2.1 Example: Cross-Platform Shape Drawing

```{pyodide-python}
from abc import ABC, abstractmethod

# Implementor
class DrawingAPI(ABC):
    @abstractmethod
    def draw_circle(self, x, y, radius):
        pass

# Concrete Implementors
class SVGDrawingAPI(DrawingAPI):
    def draw_circle(self, x, y, radius):
        print(f"SVG: Drawing circle at ({x}, {y}) with radius {radius}")

class CanvasDrawingAPI(DrawingAPI):
    def draw_circle(self, x, y, radius):
        print(f"Canvas: Drawing circle at ({x}, {y}) with radius {radius}")

# Abstraction
class Shape(ABC):
    def __init__(self, drawing_api):
        self.drawing_api = drawing_api

    @abstractmethod
    def draw(self):
        pass

# Refined Abstraction
class Circle(Shape):
    def __init__(self, x, y, radius, drawing_api):
        super().__init__(drawing_api)
        self.x = x
        self.y = y
        self.radius = radius

    def draw(self):
        self.drawing_api.draw_circle(self.x, self.y, self.radius)

# Usage
svg_api = SVGDrawingAPI()
canvas_api = CanvasDrawingAPI()

svg_circle = Circle(5, 10, 15, svg_api)
canvas_circle = Circle(20, 30, 40, canvas_api)

svg_circle.draw()
canvas_circle.draw()
```

### 2.2 Benefits of Bridge
- Decouples abstraction from implementation
- Improves extensibility
- Hides implementation details from clients

## 3. Composite Pattern

The Composite pattern lets you compose objects into tree structures and then work with these structures as if they were individual objects.

### 3.1 Example: File System Structure

```{pyodide-python}
from abc import ABC, abstractmethod

class FileSystemComponent(ABC):
    @abstractmethod
    def display(self, indent=""):
        pass

    @abstractmethod
    def get_size(self):
        pass

class File(FileSystemComponent):
    def __init__(self, name, size):
        self.name = name
        self.size = size

    def display(self, indent=""):
        print(f"{indent}{self.name} ({self.size} bytes)")

    def get_size(self):
        return self.size

class Directory(FileSystemComponent):
    def __init__(self, name):
        self.name = name
        self.children = []

    def add(self, component):
        self.children.append(component)

    def display(self, indent=""):
        print(f"{indent}{self.name}/")
        for child in self.children:
            child.display(indent + "  ")

    def get_size(self):
        return sum(child.get_size() for child in self.children)

# Usage
root = Directory("root")
docs = Directory("docs")
pictures = Directory("pictures")

root.add(docs)
root.add(pictures)
root.add(File("config.txt", 100))

docs.add(File("report.pdf", 2000))
pictures.add(File("vacation.jpg", 3000))
pictures.add(File("family.png", 4000))

root.display()
print(f"Total size: {root.get_size()} bytes")
```

### 3.2 Benefits of Composite
- Simplifies client code when working with complex hierarchies
- Makes it easy to add new types of components
- Provides flexibility in structuring data

## 4. Decorator Pattern

The Decorator pattern lets you attach new behaviors to objects by placing these objects inside special wrapper objects that contain the behaviors.

### 4.1 Example: Coffee Ordering System

```{pyodide-python}
from abc import ABC, abstractmethod

class Coffee(ABC):
    @abstractmethod
    def get_cost(self):
        pass

    @abstractmethod
    def get_description(self):
        pass

class SimpleCoffee(Coffee):
    def get_cost(self):
        return 5

    def get_description(self):
        return "Simple coffee"

class CoffeeDecorator(Coffee):
    def __init__(self, coffee):
        self._coffee = coffee

    def get_cost(self):
        return self._coffee.get_cost()

    def get_description(self):
        return self._coffee.get_description()

class Milk(CoffeeDecorator):
    def __init__(self, coffee):
        super().__init__(coffee)

    def get_cost(self):
        return self._coffee.get_cost() + 2

    def get_description(self):
        return self._coffee.get_description() + ", milk"

class Sugar(CoffeeDecorator):
    def __init__(self, coffee):
        super().__init__(coffee)

    def get_cost(self):
        return self._coffee.get_cost() + 1

    def get_description(self):
        return self._coffee.get_description() + ", sugar"

# Usage
coffee = SimpleCoffee()
print(f"{coffee.get_description()} costs ${coffee.get_cost()}")

coffee_with_milk = Milk(coffee)
print(f"{coffee_with_milk.get_description()} costs ${coffee_with_milk.get_cost()}")

coffee_with_milk_and_sugar = Sugar(coffee_with_milk)
print(f"{coffee_with_milk_and_sugar.get_description()} costs ${coffee_with_milk_and_sugar.get_cost()}")
```

### 4.2 Benefits of Decorator
- Adds responsibilities to objects dynamically
- Provides a flexible alternative to subclassing
- Allows for a mix-and-match approach to adding features

## 5. Facade Pattern

The Facade pattern provides a simplified interface to a complex subsystem.

### 5.1 Example: Home Theater Facade

```{pyodide-python}
class Amplifier:
    def on(self):
        print("Amplifier is on")

    def set_volume(self, level):
        print(f"Amplifier volume set to {level}")

class DVDPlayer:
    def on(self):
        print("DVD Player is on")

    def play(self, movie):
        print(f"Playing '{movie}'")

class Projector:
    def on(self):
        print("Projector is on")

    def wide_screen_mode(self):
        print("Projector in widescreen mode")

class HomeTheaterFacade:
    def __init__(self, amp, dvd, projector):
        self.amp = amp
        self.dvd = dvd
        self.projector = projector

    def watch_movie(self, movie):
        print("Get ready to watch a movie...")
        self.amp.on()
        self.amp.set_volume(5)
        self.dvd.on()
        self.projector.on()
        self.projector.wide_screen_mode()
        self.dvd.play(movie)

# Usage
amp = Amplifier()
dvd = DVDPlayer()
projector = Projector()

home_theater = HomeTheaterFacade(amp, dvd, projector)
home_theater.watch_movie("Inception")
```

### 5.2 Benefits of Facade
- Simplifies interface to a complex subsystem
- Decouples client code from subsystem
- Provides a context for usage

## 6. Flyweight Pattern

The Flyweight pattern lets you fit more objects into the available amount of RAM by sharing common parts of state between multiple objects instead of keeping all of the data in each object.

### 6.1 Example: Character Rendering in a Document

```{pyodide-python}
import string

class CharacterStyle:
    def __init__(self, font, size):
        self.font = font
        self.size = size

class Character:
    def __init__(self, char, style):
        self.char = char
        self.style = style

    def render(self):
        print(f"Character '{self.char}' with font {self.style.font} and size {self.style.size}")

class CharacterFactory:
    def __init__(self):
        self.styles = {}

    def get_style(self, font, size):
        key = (font, size)
        if key not in self.styles:
            self.styles[key] = CharacterStyle(font, size)
        return self.styles[key]

    def create_character(self, char, font, size):
        style = self.get_style(font, size)
        return Character(char, style)

# Usage
factory = CharacterFactory()
document = []

# Create a document with repeated styles
for char in "Hello, World!":
    if char in string.ascii_lowercase:
        document.append(factory.create_character(char, "Arial", 12))
    elif char in string.ascii_uppercase:
        document.append(factory.create_character(char, "Times New Roman", 14))
    else:
        document.append(factory.create_character(char, "Courier", 10))

# Render the document
for char in document:
    char.render()

print(f"Number of unique styles: {len(factory.styles)}")
```

### 6.2 Benefits of Flyweight
- Reduces memory usage when dealing with a large number of similar objects
- Improves performance in applications with many objects
- Centralizes state for many virtual objects

## 7. Proxy Pattern

The Proxy pattern lets you provide a substitute or placeholder for another object. A proxy controls access to the original object, allowing you to perform something either before or after the request gets through to the original object.

### 7.1 Example: Lazy Loading Image Proxy

```{pyodide-python}
from abc import ABC, abstractmethod

class Image(ABC):
    @abstractmethod
    def display(self):
        pass

class RealImage(Image):
    def __init__(self, filename):
        self.filename = filename
        self.load_image_from_disk()

    def load_image_from_disk(self):
        print(f"Loading {self.filename}")

    def display(self):
        print(f"Displaying {self.filename}")

class ImageProxy(Image):
    def __init__(self, filename):
        self.filename = filename
        self.real_image = None

    def display(self):
        if self.real_image is None:
            self.real_image = RealImage(self.filename)
        self.real_image.display()

# Usage
image1 = ImageProxy("image1.jpg")
image2 = ImageProxy("image2.jpg")

print("Image list created. No loading yet.")
image1.display()  # image1 is loaded and displayed
image1.display()  # image1 is displayed without reloading
image2.display()  # image2 is loaded and displayed
```

### 7.2 Benefits of Proxy
- Controls access to the original object
- Can manage the lifecycle of the original object
- Adds a level of indirection for distributed, controlled, or intelligent access

## Conclusion

Structural design patterns provide various ways to organize code for better structure, flexibility, and efficiency. They help in creating relationships between entities, making systems easier to maintain and extend. By understanding and applying these patterns, developers can create more robust and scalable software architectures.