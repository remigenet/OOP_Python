---
title: "Python Package Management and Virtual Environments"
weight: 10
tags:
  - Pandas
  - Bases
  - Libraries
  - Cours
categories:
  - Cours
  - Fondamentaux
type: book
description: "Learn to create a package and manage virtual environment"
image: .img/dunder_poo2.webp
filters:
  - pyodide
---

## Python Package Management and Virtual Environments

---

When developing Python projects, managing dependencies and isolating environments are crucial. There are several tools available for these tasks:

### Package Management Tools:
1. pip: The standard package installer for Python.
2. Poetry: A modern dependency management and packaging tool.
3. Conda: A package, dependency, and environment management system (popular in data science).

### Virtual Environment Tools:
1. venv: Built-in Python module for creating virtual environments.
2. pyenv: Allows you to easily switch between multiple versions of Python.
3. virtualenv: A tool to create isolated Python environments (precursor to venv).

Let's focus on pip, venv, and an introduction to Poetry.

### Using pip and venv

1. Create a virtual environment:
   ```
   python -m venv myenv
   ```

2. Activate the environment:
   - Windows: `myenv\Scripts\activate`
   - macOS/Linux: `source myenv/bin/activate`

3. Install packages:
   ```
   pip install package_name
   ```

4. Create a requirements.txt file:
   ```
   pip freeze > requirements.txt
   ```

5. Install from requirements.txt:
   ```
   pip install -r requirements.txt
   ```

### Introduction to Poetry

Poetry is a more modern tool that combines dependency management, package building, and publishing.

1. Install Poetry:
   ```
   pip install poetry
   ```

2. Create a new project or initialize an existing one:
   ```
   poetry new myproject
   # or
   poetry init
   ```

3. Add dependencies:
   ```
   poetry add package_name
   ```

4. Install dependencies:
   ```
   poetry install
   ```

### The pyproject.toml File

Poetry uses `pyproject.toml` for project configuration. Here's a simple example:

```toml
[tool.poetry]
name = "myproject"
version = "0.1.0"
description = "A sample Python project"
authors = ["Your Name <you@example.com>"]

[tool.poetry.dependencies]
python = "^3.9"
requests = "^2.26.0"

[tool.poetry.dev-dependencies]
pytest = "^6.2.5"
```

This file defines your project's metadata and dependencies.

### Building and Publishing

Building a package means creating a distribution that can be installed by pip. Publishing means uploading this distribution to a package index like PyPI.

1. Build your package:
   ```
   poetry build
   ```
   This creates distribution files in the `dist/` directory.

2. Publish to PyPI:
   ```
   poetry publish
   ```
   This uploads your built package to PyPI, making it available for others to install.

Poetry simplifies these processes, handling the complexities of building and publishing for you.
